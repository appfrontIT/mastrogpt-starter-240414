openapi: 3.1.0
info:
  title: Lookinglass - OpenAPI 3.1
  description: |-
    [Lookinglass page](https://www.appfront.cloud/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: it@appfront.cloud
  version: 1.0.11
externalDocs:
  description: Lookinglass manual
  url: https://appfront-operations.gitbook.io/lookinglass-manuale-utente
servers:
  - url: https://nuvolaris.dev/api/v1/web
tags:
  - name: lookinglass
    description: lookinglass api reference
  - name: user
    description: Operations about user
paths:
  /gporchia/lookinglass/chat:
    post:
      tags:
        - lookinglass
      summary: query the bot
      description: make a query to the Lookinglass bot
      operationId: lookinglassBot
      requestBody:
        description: query the bot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
          application/xml:
            schema:
              $ref: '#/components/schemas/Chat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chat'
        required: true
      responses:
        '204':
          description: action returns without content
        '404':
          description: user not found
  /gporchia/user/add:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the admin.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Activation:
      type: object
      properties:
        id:
          type: string
          examples: ['23f48615b71d4139b48615b71d6139d8']
      xml:
        name: activation
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [100000]
        username:
          type: string
          examples: [fehguy]
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          examples: [437 Lytton]
        city:
          type: string
          examples: [Palo Alto]
        state:
          type: string
          examples: [CA]
        zip:
          type: string
          examples: ['94301']
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Dogs]
      xml:
        name: category
    User:
      type: object
      properties:
        username:
          type: string
          examples: [user]
        password:
          type: string
          examples: ['12345']
        namespace:
          trype: string
          examples: [gporchia/user]
        package:
          type: string
          examples: [user]
        role:
          type: string
          examples: [admin]
        shared package:
          type: array
          examples: 
            - [package1, package2]
        cookie:
          type: string
          examples: [tOoTNPeBM7jK36EdBWDkzGDGVxYt2LSyvht0sBplSLD7Vt2zmGzIeyeYPhHVOJZ3sVQOV4GrtBvK6P_9QNcqbw]
        chat:
          type: array
        history:
          type: array
      xml:
        name: user
    Chat:
      required:
        - input
      type: object
      properties:
        input:
          type: string
          examples: [str]
        OPENAI_API_KEY:
          type: string
          examples: [sk-******************************************kkAte]
        cookie:
          type: string
          examples: [tOoTNPeBM7jK36EdBWDkzGDGVxYt2LSyvht0sBplSLD7Vt2zmGzIeyeYPhHVOJZ3sVQOV4GrtBvK6P_9QNcqbw]
      xml:
        name: chat
  requestBodies:
    Chat:
      description: Chat object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chat'
        application/xml:
          schema:
            $ref: '#/components/schemas/Chat'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
