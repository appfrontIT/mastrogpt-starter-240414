from openai import OpenAI
from openai.types.chat import ChatCompletion, ChatCompletionMessageToolCall
from typing import List
import config
import json
import utils
import requests
from requests.auth import HTTPBasicAuth
import os

html = ""
nuvolaris = []
test_link = ""
crud = []


crud.append(utils.crawl('https://budibase.com/blog/crud-app/'))
# nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/actions.html"))
# nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/webactions.html"))
# nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/parameters.html"))
# nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/annotations.html"))

messages = []

action_url = ""
MODEL = "gpt-3.5-turbo"
EMB = """
- From now on you are a programming language. You only code in Python
- If the user ask to write a program or a function you answer with a function you created based on user requests
- all the function you write always start with "def main(args):", and return a dictionary or array WITH KEY "body"
- display action such as: "/'namespace'/'package'/'action'"
- NEVER use async
- if you need to accept parameters you will get those such as: args.get("url") to get "url", args.get("name") to get "name" and so on
- Explain information about an action in a very meticolous way, including the parameters of the function and a python and curl example
- you can use only the follow libraries: requests, re, json
- If the user user wants to update an action, call the 'update_action' function
- NEVER call action_info if the user wants to update or modify an action
- If you have to return an HTML page, add this CSS to the head: '<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">'
"""

EXTRACT_DATA ="""
you analyze the text and extract the name of the action and the function
if both are no present, don't call the function and answer with the element missing
"""

HTML_INFO ="""
<!DOCTYPE html>
<html>
<head></head>
<body>
<h1>Bot functionalities</h1>
<h2>The bot is able to interact directly with your nuvolaris environment.<br>
    You can ask him to perform operations over actions, such as:</h2><br>
<ul>
  <li>Create functions ad deploy the action to call it.<br>
  The bot will generate a name accordingly to the type of action.<br>
  Actions generated by the bot already have a description about the function as annotation.<br>
  They also have an annotations with 'key' parameters where there are the key and type of the function parameters</li>
  <li>Give you the actions list. The actions list will be given as: /{namespace}/{packagename}/{action}.</li>
  <li>Delete one action. Simply make the request like "delete {action}".<br>
  If the action is part of a package specify the package({package}/{action}).<br>
  It's possible to delete multiple action at a time, doing like "delete {action} {action} {action} {action}"</li>
  <li>Show additional information about one action.<br>
  Just ask "{action} info" and you will get the action data and an explanation of the action.<br>
  The bot can't produce information about a packed action, unless a description of the action is provided as annotation.</li>
</ul>
</body>
</html>
"""

TEST = """
<!DOCTYPE html>
<html>
<head>
    <title>Nuvolaris Action Test</title>
</head>
<body>
    <h2>Action URL: <a href="https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three" target="_blank">https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three</a></h2>
    
    <p>This function takes a number as input and returns the result of multiplying the number by 3.</p>

    <input type="number" id="inputNumber" placeholder="Enter a number">
    <button onclick="callAction()">Multiply by 3</button>
    
    <p id="result"></p>
    
    <script>
        function callAction() {
            const number = document.getElementById("inputNumber").value;
            
            fetch('https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    number: parseInt(number)
                })
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("result").innerText = "Result: " + data.result;
            })
            .catch(error => {
                document.getElementById("result").innerText = "An error occurred. Please try again.";
            });
        }
    </script>
</body>
</html>
"""