from openai import OpenAI
from openai.types.chat import ChatCompletion, ChatCompletionMessageToolCall
from typing import List
import config
import json
import utils
import requests
from requests.auth import HTTPBasicAuth
import os

html = ""
nuvolaris = []
test_link = ""

nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/actions.html"))
nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/webactions.html"))
nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/parameters.html"))
nuvolaris.append(utils.crawl("https://nuvolaris.github.io/nuvolaris/3.1.0/development/annotations.html"))


action_url = ""
MODEL = "gpt-3.5-turbo"
EMB = """
- From now on you are a programming language. You only code in Python
- If the user ask to write a program or a function you answer with a function you created based on user requests
- all the function you write always start with "def main(args):", and return a dictionary or array such as:{"body": {"output": "output"}}. Any other return type is forbidden
- display action such as: "/'namespace'/'package'/'action'"
- NEVER use async
- if you need to accept parameters you will get those such as: args.get("url") to get "url", args.get("name") to get "name" and so on
- Explain information about an action in a very meticolous way, including the parameters of the function and a python and curl example
- you can use only the follow libraries:
aiohttp v1.3.3
appdirs v1.4.3
asn1crypto v0.21.1
async-timeout v1.2.0
attrs v16.3.0
beautifulsoup4 v4.5.1
cffi v1.9.1
chardet v2.3.0
click v6.7
cryptography v1.8.1
cssselect v1.0.1
gevent v1.2.1
greenlet v0.4.12
httplib2 v0.9.2
idna v2.5
itsdangerous v0.24
kafka-python v1.3.1
lxml v3.6.4
MarkupSafe v1.0
multidict v2.1.4
packaging v16.8
parsel v1.1.0
pyasn1 v0.2.3
pyasn1-modules v0.0.8
pycparser v2.17
PyDispatcher v2.0.5
pyOpenSSL v16.2.0
pyparsing v2.2.0
python-dateutil v2.5.3
queuelib v1.4.2
requests v2.11.1
Scrapy v1.1.2
service-identity v16.0.0
simplejson v3.8.2
six v1.10.0
Twisted v16.4.0
w3lib v1.17.0
Werkzeug v0.12
yarl v0.9.8
zope.interface v4.3.3
"""

EXTRACT_DATA ="""
you analyze the text and extract the name of the action and the function
if both are no present, don't call the function and answer with the element missing
"""

HTML_INFO ="""
<!DOCTYPE html>
<html>
<head></head>
<body>
<h1>Bot functionalities</h1>
<h2>The bot is able to interact directly with your nuvolaris environment.<br>
    You can ask him to perform operations over actions, such as:</h2><br>
<ul>
  <li>Create functions ad deploy the action to call it.<br>
  The bot will generate a name accordingly to the type of action.<br>
  Actions generated by the bot already have a description about the function as annotation.<br>
  They also have an annotations with 'key' parameters where there are the key and type of the function parameters</li>
  <li>Give you the actions list. The actions list will be given as: /{namespace}/{packagename}/{action}.</li>
  <li>Delete one action. Simply make the request like "delete {action}".<br>
  If the action is part of a package specify the package({package}/{action}).<br>
  It's possible to delete multiple action at a time, doing like "delete {action} {action} {action} {action}"</li>
  <li>Show additional information about one action.<br>
  Just ask "{action} info" and you will get the action data and an explanation of the action.<br>
  The bot can't produce information about a packed action, unless a description of the action is provided as annotation.</li>
</ul>
</body>
</html>
"""

TEST = """
<!DOCTYPE html>
<html>
<head>
    <title>Nuvolaris Action Test</title>
</head>
<body>
    <h2>Action URL: <a href="https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three" target="_blank">https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three</a></h2>
    
    <p>This function takes a number as input and returns the result of multiplying the number by 3.</p>

    <input type="number" id="inputNumber" placeholder="Enter a number">
    <button onclick="callAction()">Multiply by 3</button>
    
    <p id="result"></p>
    
    <script>
        function callAction() {
            const number = document.getElementById("inputNumber").value;
            
            fetch('https://nuvolaris.dev/api/v1/web/gporchia/default/multiply_by_three', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    number: parseInt(number)
                })
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("result").innerText = "Result: " + data.result;
            })
            .catch(error => {
                document.getElementById("result").innerText = "An error occurred. Please try again.";
            });
        }
    </script>
</body>
</html>
"""