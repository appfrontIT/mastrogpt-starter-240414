from openai import OpenAI
from openai.types.chat import ChatCompletion, ChatCompletionMessageToolCall
from typing import List
import config
import json
import utils
import requests
from requests.auth import HTTPBasicAuth
import os

html = ""
editor = ""
session_user = None

OW_KEY = os.getenv('__OW_API_KEY')
OW_API_SPLIT = OW_KEY.split(':')
QUERY: str = ""
AI: OpenAI = None

action_url = ""
MODEL = "gpt-4o"

ROLE = """
You are a programmer.
You must fulfill the user request in the best way possible.
You are very indepent in your job and you have many tools at your disposition. Think of tools as your assistants or collegues.
This is a list of your available tools:
    - show_all_actions: show all available actions to the user;
    - delete_action: delete one action;
    - update_action: update one action;
    - action_info: get information about an action;
    - create_action: create an action;
    - html_gen: generate an html page;
    - crawler: use apify to scrape a domain and all sub links;
    - tester: test an action;
    - grapher: generate an html to display a graph;
    - db_store: store a collection of data inside the database following a specific format
    - verify: check the correctness of an action
    - get_actions: get informations about all available actions
Other than tools, you have already deployed actions.
You should start checking your internal actions calling get_actions function. Ask the user for permission if you have any doubt
Than, if you find an action suitable for your needs, you can use it if you have enought informations or call action_info to get more.
    
Think like someone is giving you an assignment to do. You must collect as much informations as possible, and than proceed to develop the application.
You work with Nuvolaris, a serverless platform based on Openwhisk.
Each time you call an internal function, think if you can improve the answer and if you need to call another function.
Take your time to answer and think backward. It is possible that you must call function, wait the answer, and than call another function.
It's very important that you define your steps at the beginning and than proceed step by step.
You can obviously call other actions, they're tools at your disposition and you should use them.

Work independently. Use your internal tools and guide the user throught the solution. You can ask for permission if you want to be sure you can use another action or an internal function.
Make the user partecipating your chain of thoughts, asking if you're thinkings are correct and for clarifications on how to proceed.
Keep the user updated on your operations, calling the fuction send_message to explain what you are doing each time you use another function

Don't make assumptions about what values to plug into functions. Read carefully the function parameters.
Only use the functions you have been provided with!

Output:
 - Never answer in markdown format.
 - You must display any link with the full path, without alias. Open links in an external tab, always!
"""

HTML_INFO ="""
<!DOCTYPE html>
<html>
<head></head>
<body>
<h1>Bot functionalities</h1>
<h2>The bot is able to interact directly with your nuvolaris environment.<br>
    You can ask him to perform operations over actions, such as:</h2><br>
<ul>
  <li>Create functions ad deploy the action to call it.<br>
  The bot will generate a name accordingly to the type of action.<br>
  Actions generated by the bot already have a description about the function as annotation.<br>
  They also have an annotations with 'key' parameters where there are the key and type of the function parameters</li>
  <li>Give you the actions list. The actions list will be given as: /{namespace}/{packagename}/{action}.</li>
  <li>Delete one action. Simply make the request like "delete {action}".<br>
  If the action is part of a package specify the package({package}/{action}).<br>
  It's possible to delete multiple action at a time, doing like "delete {action} {action} {action} {action}"</li>
  <li>Show additional information about one action.<br>
  Just ask "{action} info" and you will get the action data and an explanation of the action.<br>
  The bot can't produce information about a packed action, unless a description of the action is provided as annotation.</li>
  <li>You can ask the bot make an HTML page incorporating others actions. This is still in delevopment. Example:<br>"Make an action returning an html page calling the following actions: {action1}, {action2}, {...}
</ul>
</body>
</html>
"""