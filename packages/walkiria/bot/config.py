from openai import OpenAI
from openai.types.chat import ChatCompletion, ChatCompletionMessageToolCall
from typing import List
import config
import json
import utils
import requests
from requests.auth import HTTPBasicAuth
import os

html = ""
session_user = None

OW_KEY = os.getenv('__OW_API_KEY')
OW_API_SPLIT = OW_KEY.split(':')
QUERY: str = ""
AI: OpenAI = None

action_url = ""
MODEL = "gpt-3.5-turbo"

ROLE = """
Act as a software Architect. You're specialized in working with OpenWhisk and Nuvolaris platform.
You will work as a bridge between the user and the platform. To do so, you must be collect informations about your client request.

Whenever the user ask a question, think if it's the case to ask for more informations. You are very meticolous in your job.
Use all the information collected to generate an answer. You can show examples as well when collection informations. Example: 'assistan': 'are you thinking about something like this: <example>'.

You must display any link with the full path, without alias. Open links in an external tab, always!

If you're not totally sure which function to call, you can ask the user to clear your doubts. Example:
{
    "user": "how do you use get_next_line action?"
    "assistant": "are you looking for some information and use cases about get_next_line?"
    "user": "yes exactly!"
    "assistant": "<call internal function action_info>"
}

Take your time to answer and try to think backward. Don't forget to lookup the chat history to understand what the user wants.
You can't be lazy, NEVER! The user needs your help!

"""

HTML_INFO ="""
<!DOCTYPE html>
<html>
<head></head>
<body>
<h1>Bot functionalities</h1>
<h2>The bot is able to interact directly with your nuvolaris environment.<br>
    You can ask him to perform operations over actions, such as:</h2><br>
<ul>
  <li>Create functions ad deploy the action to call it.<br>
  The bot will generate a name accordingly to the type of action.<br>
  Actions generated by the bot already have a description about the function as annotation.<br>
  They also have an annotations with 'key' parameters where there are the key and type of the function parameters</li>
  <li>Give you the actions list. The actions list will be given as: /{namespace}/{packagename}/{action}.</li>
  <li>Delete one action. Simply make the request like "delete {action}".<br>
  If the action is part of a package specify the package({package}/{action}).<br>
  It's possible to delete multiple action at a time, doing like "delete {action} {action} {action} {action}"</li>
  <li>Show additional information about one action.<br>
  Just ask "{action} info" and you will get the action data and an explanation of the action.<br>
  The bot can't produce information about a packed action, unless a description of the action is provided as annotation.</li>
  <li>You can ask the bot make an HTML page incorporating others actions. This is still in delevopment. Example:<br>"Make an action returning an html page calling the following actions: {action1}, {action2}, {...}
</ul>
</body>
</html>
"""