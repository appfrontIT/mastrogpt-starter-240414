openapi: 3.1.0
info:
  title: Lookinglass - OpenAPI 3.1
  description: |-
    [Lookinglass page](https://www.appfront.cloud/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: it@appfront.cloud
  version: 1.0.11
externalDocs:
  description: Lookinglass manual
  url: https://appfront-operations.gitbook.io/lookinglass-manuale-utente
servers:
  - url: https://nuvolaris.dev/api/v1/web
tags:
  - name: auth
    description: authorization endpoints
  - name: user
    description: Operations about user
  - name: db
    description: Operations using the database
  - name: package
    description: operations with an OpenWhisk package
  - name: invoke
    description: action to invoke the relative chat bot
  - name: action
    description: endpoint to work with actions
  - name: utility
    description: collection of utility API
paths:
  /gporchia/utility/apify_scraper:
    get:
      tags:
        - utility
      security:
        - bearerAuth: []
      summary: apify scraper
      description: scrape the desidered url and all subpages of the same domain
      operationId: apifyScraper
      parameters:
        - in: query
          name: url
          description: the url to scrape
          required: true
          schema:
            type: string
        - in: query
          name: embedding
          description: true if you want to store also the embedding of each page
          required: false
          schema: 
            type: boolean
      responses:
        204:
          description: operation succesfull
        400:
          description: bad request
        401:
          description: unauthorized
        500:
          description: internal server error
  /gporchia/utility/to_md:
    get:
      tags:
        - utility
      summary: convert text or pdf in markdown providing url
      description: convert the file at the given url into markdown.
      operationId: ToMarkdown
      parameters:
        - in: query
          name: url
          description: the url of the desidered file (needs the extension)
          required: true
          schema:
            type: string
      responses:
        200:
          description: operation succesfull
          content:
            text/plain:
              schema:
                type: string
        400:
          description: bad request
        500:
          descriptin: server internal error
  /gporchia/utility/md_to_json:
    get:
      tags:
        - utility
      summary: markdown to json object
      description: convert a markdown table into a json object
      operationId: mdToJson
      parameters:
        - in: query
          name: md
          description: the md string
          required: true
          schema:
            type: string
      responses:
        200:
          description: the json string
          content:
            application/json:
              schema:
                type: string
        400:
          description: bad request
        500:
          description: server internal error
  /gporchia/base/action/add:
    post:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: add an action to Nuvolaris
      description: this API will upload an action inside Nuvolaris cluster
      operationId: addAction
      requestBody:
        description: the action parameters
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                function:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: the uploaded action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        413:
          description: request entity too large
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/action/delete:
    delete:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: delete an action from Nuvolaris
      description: this API will delete an action inside Nuvolaris cluster
      operationId: deleteAction
      parameters:
        - in: query
          name: name
          description: the action name
          required: true
          schema: 
            type: string
      responses:
        200:
          description: deleted item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        404:
          description: not found
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/action/update:
    post:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: update an action
      description: this API will update an action inside Nuvolaris cluster
      operationId: updateAction
      requestBody:
        description: the action parameters
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                function:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: the uploaded action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        413:
          description: request entity too large
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/action/find:
    get:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: find an action inside Nuvolaris
      description: this API will find an action inside Nuvolaris cluster
      operationId: findAction
      parameters:
        - in: query
          name: name
          description: the action name
          required: true
          schema: 
            type: string
      responses:
        200:
          description: the uploaded action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        404:
          description: not found
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/action/find_all:
    get:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: find all actions
      description: this API will find all the actions inside Nuvolaris cluster
      operationId: find_allAction
      responses:
        200:
          description: all the actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/action/activation:
    get:
      tags:
        - action
      security:
        - bearerAuth: []
      summary: get an action status
      description: this API will get an action status
      operationId: activationAction
      parameters:
        - in: query
          name: id
          description: the action id
          required: true
          schema: 
            type: number
      responses:
        202:
          description: the action result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    type: string
                  success:
                    type: boolean
                  size:
                    type: number
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        404:
          description: not found
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/invoke/walkiria:
    post:
      tags:
        - invoke
      security:
        - bearerAuth: []
      summary: invoke walkiria bot (code generator)
      description: this API will pass the input to the chat bot asynchronously
      operationId: invokeWalkiria
      requestBody:
        description: the query to pass to the bot
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  examples: ['Please, write an action that returns a string passed as parameter backwards']
      responses:
        200:
          description: action invokation id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        401:
          description: unautorized
  /gporchia/base/invoke/lookinglass:
    post:
      tags:
        - invoke
      security:
        - bearerAuth: []
      summary: invoke Lookinglass bot (Manual references)
      description: this API will pass the input to the chat bot asynchronously
      operationId: invokeLookinglass
      requestBody:
        description: the query to pass to the bot
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  examples: ['how do you make a quotation?']
      responses:
        200:
          description: action invokation id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        401:
          description: unautorized
  /gporchia/base/invoke/admin:
    post:
      tags:
        - invoke
      security:
        - bearerAuth: []
      summary: invoke Admin bot (administration features)
      description: this API will pass the input to the chat bot asynchronously
      operationId: invokeAdmin
      requestBody:
        description: the query to pass to the bot
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  examples: ['Please, give me the list of the users']
      responses:
        200:
          description: action invokation id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        401:
          description: unautorized
        403:
          description: forbidden
  /gporchia/base/auth/login:
    post:
      tags:
        - auth
      summary: login
      description: login into Appfront platform
      operationId: login
      requestBody:
        description: login with username and password
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  examples: ['user']
                password:
                  type: string
                  examples: ['password']
        required: true
      responses:
        '200':
          description: login successful. Returns a JWT encrypting the user
          content:
            application/json: 
              schema:
                type: object
                properties:
                  token:
                    type: string
                    examples: ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NjNlNGYyZDU1Nzg2Mzc2MDEyMjdhYTciLCJ1c2VybmFtZSI6InBpcHBvIiwicGFzc3dvcmQiOiJhMjI0MmVhZDU1Yzk0YzNkZWI3Y2YyMzQwYmZlZjlkNWJjYWNhMjJkZmU2NmU2NDY3NDVlZTQzNzFjNjMzZmM4Iiwicm9sZSI6InVzZXIiLCJuYW1lc3BhY2UiOiJncG9yY2hpYS9waXBwbyIsInBhY2thZ2UiOiJwaXBwbyIsInNoYXJlZCBwYWNrYWdlIjpbXSwiY29va2llIjoid25PazdfbkNjbFJSeTg2WU1RT2dHMzdVM1pxOWtiSnZpd3EwSXJjNWpoNnE4N0hiMWtGQWVHUmVERGVHMjNwUUlpRXZXSENMbkQtQmpoZjZDSGZkM3ciLCJjaGF0IjpbXX0.2u8Ina23yGPRnjKGhakTo-tywYfcQ9QDuxW8xFS0GBw']
        '400':
          description: username or password are missing
        '404':
          description: user not found
  /gporchia/base/auth/logout:
    delete:
      tags:
        - auth
      summary: logout
      description: logout from Appfront platform. Delete cookies
      operationId: logout
      responses:
        '200':
          description: user logout
  /gporchia/base/auth/token:
    get:
      tags:
        - auth
      summary: get JWT
      description: get the user JWT if the cookie is present. Meaningful only while working with the client
      operationId: getToken
      responses:
        200:
          description: user found by cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    examples: ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NjNlNGYyZDU1Nzg2Mzc2MDEyMjdhYTciLCJ1c2VybmFtZSI6InBpcHBvIiwicGFzc3dvcmQiOiJhMjI0MmVhZDU1Yzk0YzNkZWI3Y2YyMzQwYmZlZjlkNWJjYWNhMjJkZmU2NmU2NDY3NDVlZTQzNzFjNjMzZmM4Iiwicm9sZSI6InVzZXIiLCJuYW1lc3BhY2UiOiJncG9yY2hpYS9waXBwbyIsInBhY2thZ2UiOiJwaXBwbyIsInNoYXJlZCBwYWNrYWdlIjpbXSwiY29va2llIjoid25PazdfbkNjbFJSeTg2WU1RT2dHMzdVM1pxOWtiSnZpd3EwSXJjNWpoNnE4N0hiMWtGQWVHUmVERGVHMjNwUUlpRXZXSENMbkQtQmpoZjZDSGZkM3ciLCJjaGF0IjpbXX0.2u8Ina23yGPRnjKGhakTo-tywYfcQ9QDuxW8xFS0GBw']
        404:
          description: cookie or user not found
          content:
            text/plain: 
              schema:
                type: string
                examples: ["'cookie not found' or 'user not found'"]
  /gporchia/base/user/add:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Create user
      description: This can only be done by the admin.
      operationId: createUser
      requestBody:
        description: create user
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  examples: ['user, admin']
      responses:
        200:
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        405:
          description: method not allowed
  /gporchia/base/user/delete:
    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Delete user
      description: This can only be done by the admin.
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: the user id
          required: true
          schema: 
            type: number
      responses:
        204:
          description: user deleted
        400:
          description: bad request
        405:
          description: method not allowed
  /gporchia/base/user/update:
    put:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: update an user
      description: update an user providing the correct schema
      operationId: updateUser
      parameters:
        - name: id
          in: query
          description: the user id to update
          required: true
          schema:
            type: number
      requestBody:
        description: update user
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    role:
                      type: string
                    shared_package: 
                      type: array
                    cookie:
                      type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/base/user/find:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: find an user
      description: find an user using the id
      operationId: findUser
      parameters:
      - name: id
        in: query
        description: the user id to update
        required: true
        schema:
          type: number
      responses:
        200:
          description: the found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/db/mongo/{database}/{collection}/add:
    post:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: add an element
      operationId: dbAdd
      parameters:
      - in: path
        name: database
        required: true
        schema:
          type: string
        description: the desidered database
      - in: path
        name: collection
        required: true
        schema:
          type: string
        description: the desidered collection. If the collection is not in the database it will create it
      requestBody:
        description: the data to store
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        200:
          description: the added element
          content:
            application/json:
              schema:
                type: object
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
  /gporchia/db/mongo/{database}/{collection}/add_many:
    post:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: add an element
      operationId: dbAdd_many
      parameters:
      - in: path
        name: database
        required: true
        schema:
          type: string
        description: the desidered database
      - in: path
        name: collection
        required: true
        schema:
          type: string
        description: the desidered collection. If the collection is not in the database it will create it
      requestBody:
        description: the data to store
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  examples: [[{}, {}]]
      responses:
        204:
          description: no content
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: request failed
  /gporchia/db/mongo/{database}/{collection}/delete:
    delete:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: delete an element
      operationId: dbDelete
      parameters:
        - in: path
          name: database
          required: true
          schema:
            type: string
          description: the desidered database
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: the desidered collection. If the collection is not in the database it will create it
        - in: query
          name: id
          description: the element id to delete
          required: true
          schema:
            type: number
      responses:
        204:
          description: no content
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/db/mongo/{database}/{collection}/update:
    put:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: delete an element
      operationId: dbUpdate
      parameters:
        - in: path
          name: database
          required: true
          schema:
            type: string
          description: the desidered database
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: the desidered collection. If the collection is not in the database it will create it
        - in: query
          name: id
          description: the element id to update
          required: true
          schema:
            type: number
      requestBody:
        description: the update data
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        200:
          description: successfull. Returns the updated element
          content:
            application/json:
              schema:
                type: object
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/db/mongo/{database}/{collection}/find_one:
    get:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: get a single element
      operationId: dbFind_one
      parameters:
        - in: path
          name: database
          required: true
          schema:
            type: string
          description: the desidered database
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: the desidered collection. If the collection is not in the database it will create it
        - in: query
          name: any
          description: list of keys to filter the collection separated by '&'
          required: false
          schema:
            type: string
            examples: [prova]
      responses:
        200:
          description: the found element
          content:
            application/json:
              schema:
                type: object
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/db/mongo/{database}/{collection}/find_many:
    get:
      tags:
        - db
      security:
        - bearerAuth: []
      summary: get an array of elements
      operationId: dbFind_many
      parameters:
        - in: path
          name: database
          required: true
          schema:
            type: string
          description: the desidered database
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: the desidered collection. If the collection is not in the database it will create it
        - in: query
          name: any
          description: list of keys to filter the collection separated by '&'
          required: false
          schema:
            type: string
            examples: [prova]
      responses:
        200:
          description: the found elements as an array of json
          content:
            application/json:
              schema:
                type: array
                examples: [[{}, {}]]
        400:
          description: bad request
          content:
            text/plain: 
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: not found
  /gporchia/base/package/add:
    post:
      tags:
        - package
      security:
        - bearerAuth: []
      summary: add a package
      operationId: addPackage
      requestBody:
        description: add a package
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: the created package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        413:
          description: request entity too large
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/package/delete:
    delete:
      tags:
        - package
      security:
        - bearerAuth: []
      summary: delete a package
      operationId: delPackage
      parameters:
        - in: query
          name: name
          description: the name of the package to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: deleted item
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        413:
          description: request entity too large
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/package/find:
    get:
      tags:
        - package
      security:
        - bearerAuth: []
      summary: delete a package
      operationId: findPackage
      parameters:
        - in: query
          name: name
          description: the name of the package to find
          required: true
          schema:
            type: string
      responses:
        200:
          description: found item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        400:
          description: bad request
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        401:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        403:
          description: unauthorized
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        409:
          description: conflicting itrem already exists
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        413:
          description: request entity too large
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
        500:
          description: server error
          content:
            allplication/json:
              schema:
                $ref: '#/components/schemas/PackageError'
  /gporchia/base/package/share:
    put:
      tags:
        - package
      security:
        - bearerAuth: []
      summary: share a package with an existing user
      operationId: sharePackage
      parameters:
        - in: query
          name: id
          description: the user id to update
          required: true
          schema:
            type: string
      requestBody:
        description: array of packages names
        content:
          application/json:
            schema:
              type: object
              properties:
                packages:
                  type: array
                  items:
                    type: string

      responses:
        200:
          description: user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: unauthorized
        403:
          description: unauthorized
        409:
          description: conflicting itrem already exists
        413:
          description: request entity too large
        500:
          description: server error
components:
  schemas:
    Activation:
      type: object
      properties:
        id:
          type: string
          examples: ['23f48615b71d4139b48615b71d6139d8']
      xml:
        name: activation
    User:
      type: object
      properties:
        _id:
          type: number
          examples: [663cf63d5fa286ca3f33f563]
        username:
          type: string
          examples: [user]
        password:
          type: string
          examples: ['164697ecfa6ccab1caa3c97f0f3fc5ebf362bf02c50ef00a59f47ec73a3371af']
        namespace:
          trype: string
          examples: [gporchia/user]
        package:
          type: string
          examples: [user]
        role:
          type: string
          examples: [admin]
        shared package:
          type: array
          examples: 
            - [package1, package2]
        cookie:
          type: string
          examples: [tOoTNPeBM7jK36EdBWDkzGDGVxYt2LSyvht0sBplSLD7Vt2zmGzIeyeYPhHVOJZ3sVQOV4GrtBvK6P_9QNcqbw]
        chat:
          type: array
        history:
          type: array
      xml:
        name: user
    Chat:
      type: object
      properties:
        input:
          type: string
          examples: [str]
        OPENAI_API_KEY:
          type: string
          examples: [sk-******************************************kkAte]
        cookie:
          type: string
          examples: [tOoTNPeBM7jK36EdBWDkzGDGVxYt2LSyvht0sBplSLD7Vt2zmGzIeyeYPhHVOJZ3sVQOV4GrtBvK6P_9QNcqbw]
      xml:
        name: chat
    Package:
      type: object
      properties:
        namespace:
          type: string
        name:
          type: string
        version:
          type: string
        publish:
          type: boolean
        annotations:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        parameters:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        bindings:
          type: object
          properties:
            namespace:
              type: string
            name:
              type: string
        actions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              version:
                type: string
              annotations:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
              parameters:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        feeds:
          type: array
          items:
            type: object
        updated:
          type: number
          examples: [0]
    Action:
      type: object
      properties:
        namespace:
          type: string
        name:
          type: string
        version:
          type: string
        publish:
          type: boolean
        exec:
          type: object
          properties:
            kind:
              type: string
            code:
              type: string
            image:
              type: string
            main:
              type: string
            binary:
              type: boolean
            components:
              type: array
              items:
                type: string
        annotations:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        delAnnotations:
          type: array
          items:
            type: string
        parameters:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        limits:
          type: object
          properties:
            timeout:
              type: number
              examples: [60000]
            memory:
              type: number
              examples: [256]
            logs:
              type: number
              examples: [10]
            concurrency:
              type: number
              examples: [1]
            instances:
              type: number
    PackageError:
        type: object
        properties:
          error:
            type: string
          code:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
